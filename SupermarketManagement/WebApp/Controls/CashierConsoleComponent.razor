@page "/cashier_console"
@attribute [Authorize(Policy = "CashierOnly")]

@if (!string.IsNullOrWhiteSpace(cashierName))
{
    <div class="container">
        <div class="row">
            <div class="col-12">
                <h3 class="text-center mb-4">Cashier's Console</h3>
            </div>
        </div>

        <div class="row">
            <div class="col-12 col-md-4">
                <div class="mb-4">
                    <label for="cashier" class="form-label">Cashier Name:</label>
                    <input type="text" id="cashier" class="form-control" @bind-value="cashierName" />
                </div>

                <SelectProductForSellingComponent OnProductSelected="SelectProduct"></SelectProductForSellingComponent>
                <SellProductComponent CashierName="@cashierName"
                                      SelectedProduct="selectedProduct"
                                      OnProductSold="SellProduct"></SellProductComponent>
            </div>

            <div class="col-12 col-md-8">
                <br />
                <TodayTransactionsComponent @ref="transactionComponent"></TodayTransactionsComponent>
            </div>
        </div>
    </div>
}

<style>
    .container {
        margin-top: 2rem;
    }

    .text-center {
        text-align: center;
    }

    .mb-4 {
        margin-bottom: 1rem;
    }

    .form-label {
        font-weight: bold;
    }

    .form-control {
        display: block;
        width: 100%;
        padding: 0.375rem 0.75rem;
        font-size: 1rem;
        line-height: 1.5;
        color: #495057;
        background-color: #fff;
        background-clip: padding-box;
        border: 1px solid #ced4da;
        border-radius: 0.25rem;
        transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;
    }

        .form-control:focus {
            color: #495057;
            background-color: #fff;
            border-color: #80bdff;
            outline: 0;
            box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
        }

    .row {
        margin-left: -15px;
        margin-right: -15px;
    }

    .col-12 {
        flex-basis: 0;
        flex-grow: 1;
        max-width: 100%;
    }

    .col-md-4 {
        flex-basis: 0;
        flex-grow: 1;
        max-width: 33.333333%;
    }

    .col-md-8 {
        flex-basis: 0;
        flex-grow: 1;
        max-width: 66.666667%;
    }

    .btn-primary {
        color: #fff;
        background-color: #007bff;
        border-color: #007bff;
    }

        .btn-primary:hover {
            color: #fff;
            background-color: #0069d9;
            border-color: #0062cc;
        }

        .btn-primary:focus {
            color: #fff;
            background-color: #0069d9;
            border-color: #0062cc;
            box-shadow: 0 0 0 0.2rem rgba(38, 143, 255, 0.5);
        }

        .btn-primary:active {
            color: #fff;
            background-color: #0062cc;
            border-color: #005cbf;
        }

        .btn-primary:disabled {
            color: #fff;
            background-color: #007bff;
            border-color: #007bff;
        }
</style>

@code {
    private TodayTransactionsComponent transactionComponent;

    private Product selectedProduct;
    private string cashierName;

    [CascadingParameter]
    private Task<AuthenticationState> _authState { get; set; }

    private AuthenticationState authState;

    protected override async Task OnInitializedAsync()
    {
        authState = await _authState;
        cashierName = authState.User.Identity.Name;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            transactionComponent.LoadTransactions(cashierName);
        }
    }

    private void SelectProduct(Product product)
    {
        selectedProduct = product;
    }

    private void SellProduct(Product product)
    {
        transactionComponent.LoadTransactions(cashierName);
    }
}
